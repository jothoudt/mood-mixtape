import axios, { AxiosInstance } from 'axios';
import { Song } from '../models/songs';

export class SpotifyService {
  private baseUrl: string;
  constructor(spotifyBaseUrl: string) {
    this.baseUrl = spotifyBaseUrl;
  }
  async makeClient(accessToken: string): Promise<AxiosInstance> {
    return axios.create({
      baseURL: this.baseUrl,
      headers: { Authorization: `Bearer ${accessToken}` },
    });
  }

  async createPlaylist(
    name: string,
    songs: Song[],
    accessToken: string
  ): Promise<{ playlistId: string; url: string }> {
    const client = await this.makeClient(accessToken);
    const limited = (songs ?? []).slice(0, 20);

    const user = await client.get('/me');
    const userId: string = user.data.id;

    const playlistId = (
      await client.post(`/users/${encodeURIComponent(userId)}/playlists`, {
        name,
        description: `Generated by MoodMixtape ${Date.now().toLocaleString()}`,
        public: true,
      })
    )?.data?.id;

    const uris: string[] = [];
    for (const s of limited) {
      const uri = await this.findTrackUri(client, s.title, s.artist);
      if (uri) uris.push(uri);
    }

    if (uris.length) {
      await client.post(`/playlists/${playlistId}/tracks`, { uris });
    }

    return {
      playlistId,
      url: `https://open.spotify.com/embed/playlist/${playlistId}?utm_source=generator`,
    };
  }

  private async findTrackUri(
    client: AxiosInstance,
    title: string,
    artist: string
  ): Promise<string | null> {
    const q = `track:"${this.sanitize(title)}" artist:"${this.sanitize(artist.split(',')[0].trim())}"`;
    const res = await client.get('/search', {
      params: { q, type: 'track', limit: 1 },
    });

    return res.data?.tracks?.items?.[0]?.uri ?? null;
  }

  sanitize(s: string): string {
    return (s || '').replace(/[“”"']/g, '').trim();
  }
}
